.TH _PRINTF "17 march 2020" "_printf man page"

.SH NAME
- _printf.
.SH SYNOPSIS
.B  #include <stdio.h>
 int _printf(const char *format, ...);
.SH DESCRIPTION
.B _PRINTF 
 The functions in the _printf() produce output according to a
 format as described below.
 Flag characters
 The character % is followed by zero or more of the following flags:    
.B ‘%’
directives to format numeric and string arguments in a way that is mostly similar to the
.B C ‘_printf’ function.
.SH RETURN VALUE
 Upon successful return, these functions return the number of characters printed (excluding the null byte used to end output to strings).
 If an output error is encountered, a negative value is returned.
.SH THE CONVERSION SPECIFIER
.IP %%
 prints a single %
.IP %c
 prints the next argument of type Char (int argument is converted to a character)
.IP %s
 prints the next argument of type Char * // pointer to a string
.IP %i OR %d
 prints the next argument of type int
.IP %b
 The unsigned int argument is converted to unsigned binary notation then printed
.IP %u
 The unsigned int argument is converted to unsigned decimal notation then printed
.IP %o
 The unsigned int argument is converted to unsigned octal notation then printed
.IP %x
 The unsigned int argument is converted to unsigned hexadecimal notation lowercase then printed
.IP %X
 The unsigned int argument is converted to unsigned hexadecimal notation Uppercase then printed
.IP %R
 The unsigned int argument is converted to unsigned hexadecimal notation Uppercase then printed
.IP %r
 Print the reversed string.
.SH Example
 
 Chars

 printf("Expected   : %cc\n", 'a');
 _printf("Actual     : %cc\n", 'a');
 printf("Expected   : %c\n", 53);
 _printf("Actual     : %c\n", 53);
 printf("Expected   : %c.\n", '\0');
 _printf("Actual     : %c.\n", '\0');
 printf("Expected   : %%%c\n", 'y');
 _printf("Actual     : %%%c\n", 'y');

 Outputs

 Expected   : ac
 Actual     : ac
 Expected   : 5
 Actual     : 5
 Expected   : .
 Actual     : .
 Expected   : %y
 Actual     : %y
 
 Strings

 printf("Expected   : %s\n", "holberton");
 _printf("Actual     : %s\n", "holberton");
 printf("Expected   : %s$\n", "");
 _printf("Actual     : %s$\n", "");
 printf("Expected   : %sschool\n", "holberton");
 _printf("Actual     : %sschool\n", "holberton");

 Outputs

 printf("Expected   : %s\n", "holberton");
 _printf("Actual     : %s\n", "holberton");
 printf("Expected   : %s$\n", "");
 _printf("Actual     : %s$\n", "");
 printf("Expected   : %sschool\n", "holberton");
 _printf("Actual     : %sschool\n", "holberton");
 rot13 (%R)

 a = _printf("%R\n", "Holberton school");
 printf("%d\n", a);

 Outputs

 Ubyoregbafpubby
 16
 Decimal to binary (%b)

 _printf("Dec: %i -> Bin:%b\n", 9875, 9875);

 Outputs

 Dec: 9875 -> Bin:10011010010011
 Decimal to Hexadecimal (%x) and uppercase (%X)

 _printf("Dec: %i -> Hex:%x\n", 456375, 456375);
 _printf("Dec: %i -> Hex:%X\n", 456375, 456375);

 Outputs

 Dec: 456375 -> Hex:6f6b7
 Dec: 456375 -> Hex:6F6B7
 Decimal to Octal (%o)

 _printf("Dec: %i -> Oct:%o\n", 456375, 456375);

 Outputs

 Dec: 456375 -> Oct:1573267
 Integers (%d)(%i)

 _printf("Int: %i \n", 456375);
 _printf("MaxInt: %i \n", INT_MAX);
 _printf("MaxInt: %i \n", INT_MIN);

 Outputs

 Int: 456375 
 MaxInt: 2147483647 
 MinInt: -2147483648 
 Unsigned Integer (%u)

 _printf("Unsigned Int: %u \n", 456375);
 _printf("MaxUnsignedInt: %u \n", UINT_MAX);

 Outputs

 Unsigned Int: 456375 
 MaxUnsignedInt: 4294967295

 .SH SEE ALSO
 .I printf(3)
 
 .SH BUGS
  No known bugs.
 
 .SH AUTHOR
  Dairo Facundo,Eduardo Ramos
